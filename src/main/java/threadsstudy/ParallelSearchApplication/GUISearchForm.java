package threadsstudy.ParallelSearchApplication;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.LongAdder;

/**
 * Created by OTBA}|{HbIu` on 12.11.16.
 */
public class GUISearchForm extends JFrame {
    private JPanel basePanel;
    private JButton search;
    private JTextField insertSearchingText;
    //    private JTextField result;
    private JTextField insertPath;
    private JTextArea resultArea;
    private static final String DEFAULT_SEARCH_TEXT = "Insert searching text";
    private static final String DEFAULT_SEARCH_PATH = "Insert path for search";
    private int counts = 0;

    public GUISearchForm() {

    }

    public static void main(String[] args) {
        GUISearchForm form = new GUISearchForm();
        form.createUIComponents();
    }

    public void generateMessage(String s) {
        JOptionPane.showMessageDialog(basePanel, s);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        basePanel = new JPanel();
        basePanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setEnabled(false);
        basePanel.add(panel1, BorderLayout.NORTH);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
        insertSearchingText = new JTextField();
        insertSearchingText.setColumns(35);
        insertSearchingText.setDropMode(DropMode.INSERT);
        insertSearchingText.setEditable(true);
        insertSearchingText.setEnabled(true);
        insertSearchingText.setHorizontalAlignment(2);
        insertSearchingText.setPreferredSize(new Dimension(395, 27));
        insertSearchingText.setSelectionEnd(21);
        insertSearchingText.setSelectionStart(0);
        insertSearchingText.setText("Insert searching text");
        insertSearchingText.setToolTipText("");
        insertSearchingText.putClientProperty("caretWidth", new Integer(12));
        insertSearchingText.putClientProperty("html.disable", Boolean.FALSE);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(insertSearchingText, gbc);
        insertPath = new JTextField();
        insertPath.setColumns(43);
        insertPath.setDropMode(DropMode.INSERT);
        insertPath.setPreferredSize(new Dimension(483, 27));
        insertPath.setSelectionStart(0);
        insertPath.setText("Insert path for search");
        insertPath.setToolTipText("");
        insertPath.putClientProperty("caretWidth", new Integer(12));
        insertPath.putClientProperty("html.disable", Boolean.FALSE);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(insertPath, gbc);
        search = new JButton();
        search.setActionCommand("");
        search.setAlignmentY(0.0f);
        search.setHideActionText(false);
        search.setHorizontalAlignment(4);
        search.setHorizontalTextPosition(11);
        search.setText("Search Text");
        search.setVerticalAlignment(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel1.add(search, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        basePanel.add(panel2, BorderLayout.CENTER);
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setAutoscrolls(false);
        scrollPane1.setHorizontalScrollBarPolicy(31);
        panel2.add(scrollPane1, BorderLayout.WEST);
        resultArea = new JTextArea();
        resultArea.setAutoscrolls(true);
        resultArea.setBackground(new Color(-1));
        resultArea.setColumns(45);
        resultArea.setEditable(false);
        resultArea.setLineWrap(true);
        resultArea.setRows(20);
        resultArea.setWrapStyleWord(true);
        scrollPane1.setViewportView(resultArea);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return basePanel;
    }

    private class ButtonSearchListener implements ActionListener {
        private String resultPaths;
        boolean isDone = false;
        MySearchInPath search;
        Thread searchThread;

        @Override
        public void actionPerformed(ActionEvent e) {
            resultArea.setText("");
            counts = 0;
            if (!isInputText(insertSearchingText, DEFAULT_SEARCH_TEXT)
                    || !isInputText(insertPath, DEFAULT_SEARCH_PATH)) {
                return;
            }
            if (searchThread != null && !searchThread.isInterrupted()) {
                searchThread.interrupt();
            }
            searchThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    search = new MySearchInPath(insertSearchingText.getText(),
                            insertPath.getText(), GUISearchForm.this);
                    search.searchFilesWithKeyword();
                }

            });
            searchThread.start();
        }


        private boolean isInputText(JTextField textField, String defaultText) {
            if (defaultText.equals(textField.getText()) || "".equals(textField.getText())) {
                generateMessage(defaultText);
                return false;
            }
            return true;
        }
    }

    public void createUIComponents() {
        // TODO: place custom component creation code here
        insertSearchingText.setText(DEFAULT_SEARCH_TEXT);
        insertPath.setText(DEFAULT_SEARCH_PATH);
        search.addActionListener(new ButtonSearchListener());
        setContentPane(basePanel);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        pack();
        setVisible(true);
    }

    public synchronized void appendResults(String lines) {
        ConcurrentHashMap<String, LongAdder> chm = new ConcurrentHashMap<>();
        chm.putIfAbsent("word", new LongAdder());
        counts++;
        resultArea.append(String.format("%d.%s", counts, lines));
    }
}
